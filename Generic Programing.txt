GENERIC PROGRAMMING
in specific programming, we have to define the function with a specific datatype
in the case of generic programming, we define the function without considering any datatype 
the code which is written in a generic approach we can use any type of data
the concept of generic programming is available in c++ and java 
the concept of generic programming in c++ is called a template 
and the concept of generic programming in java is called generics.


GENERIC PROGRAMING IN C++

Consider the below application which demonstrates the use of generic 

Genric.cpp

#include<iostream>
using namespace std;

template <class T>
T Add(T i,T j)
{
    T ans;
    ans = i+j;
    return ans;
}


int main()
{
    int a=20,b=30,iret=0;
    float x=90.0f,y=67.07f,fret =0.0f;
    double p=90.0,q=67.07,dret =0.0;
    iret = Add(a,b);
    fret=Add(x,y);
    dret= Add(p,q);
    cout<<"Addition of integers :"<<iret<<endl;
    cout<<"Addition of float is  :"<<fret<<"\n";
     cout<<"Addition of double is  :"<<dret<<"\n";


    return 0;
}


In the above application the adds funstion gets called by passing three diffrent types of parameters 
when we compile the application the compiler will create the three separeate defination of the add function .
This process of creating the separate function is called as Template instancesiation 
We cannot convert every specific application into every generic application 




////////////////////////////////////////////////

 A Generic Class -

If our class is generic class then characteristics of that class are considered as generic.
#include<iostream>
using namespace std;

template <class T>
class Array
{
    public :
    T *Arr;
    int Size;

    Array(int length)
    {
        Size = length;
        Arr = new T[Size];
    }
    void Accept()
    {
        cout<<"Enter the values\n";
        for(int i =0;i<Size;i++)
        {
            cin>>Arr[i];
        }
    }
     void Display()
    {
        cout<<"Array is :\n";
        for(int i =0;i<Size;i++)
        {
            cout<<Arr[i]<<"\n";
        }
    }
};
int main()
{
    Array <char>obj1(5);
    obj1.Accept();
    obj1.Display();

    Array <float>obj2(5);
    obj2.Accept();
    obj2.Display();

    Array <double>obj3(5);
    obj3.Accept();
    obj3.Display();

    Array <int>obj4(5);
    obj4.Accept();
    obj4.Display();

    return 0;
}

In the above application we create four object of the array class

by passing differnt types of data types

When we create multiple objects of different datatypes the compiler will create separate classes for each datatype separately 


//////////////////////////////////////////////////////////////////

GENERIC PROGRAMING USING JAVA :
* The concept of generic programing in java is exactly same as generic programing in c++
* There are two ways in which we can perform generic programing 
1] Generic Methos
2] Generic Class


consider the application which demonstrate the concept of genric method.java







In the above application we create the generic method named as display which is used to display any type of array using the for loop 
In case of generic programing in java use of wrapper class is compulsory



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Generic Class 
Consider the below application which demonstrate the concept of Generic Class 

Generic Class.java












In the above syntax We have to specify the type of data type while creating the object of that class same as c++.

That data type should be the name of wrapper class only 




















